spring.application.name=AsmGD1
spring.datasource.url=jdbc:sqlserver://localhost;databaseName=ShoeStoreDB;trustServerCertificate=true;
spring.datasource.username=sa
spring.datasource.password=123456

# Cho phep dung .sql de tao bang va insert du lieu
# following need for creating tables
#script-based initialization is performed by default only for embedded databases (e.c H2),
#to always initialize a database using scripts, we'll have to use:
spring.jpa.generate-ddl=true

# Cho phep dung dong thoi Hibernate va .sql de tao bang
#after Hibernate schema creation is performed then additionally schema.sql is read
# for any additional schema changes and data.sql is executed to populate the database.
#both Hibernate automatic schema generation in conjugation with script-based schema creation and data population,
# we'll have to use:
spring.jpa.defer-datasource-initialization=true

# following need for add data into table (not need in H2-Database)
#to always initialize a database using scripts, we'll have to use:
#embedded, never, always
#spring.sql.init.mode=always

#disable Hibernate automatic schema creation
#This will ensure that script-based initialization is performed using schema.sql and data.sql directly.
#update, create, create-drop, validate, none (5 options default=none for SQL Server, MySQL, ...; default = create-drop for H2-Database)
spring.jpa.hibernate.ddl-auto=none

#Show SQL statements on console

##format queries (on console)
#spring.jpa.properties.hibernate.format_sql=true

#turn statistics on
#spring.jpa.properties.hibernate.generate_statistics=true

#customizing column name
#spring.jpa.properties.hibernate.physical_naming_strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

spring.security.oauth2.client.registration.google.client-id=307722207866-0mmbf156lfegenhhe3d6f9c9q833hdem.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=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
spring.security.oauth2.client.registration.google.scope=profile,email
spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/google

# OAuth2 Facebook
spring.security.oauth2.client.registration.facebook.client-id=1554266721939730
spring.security.oauth2.client.registration.facebook.client-secret=bf608457f76cf319e174409e37a82443
spring.security.oauth2.client.registration.facebook.scope=public_profile,email
spring.security.oauth2.client.registration.facebook.redirect-uri={baseUrl}/login/oauth2/code/facebook

# OAuth2 VPS
server.forward-headers-strategy=framework

spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=
spring.mail.password=
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

spring.servlet.multipart.max-file-size=50MB
spring.servlet.multipart.max-request-size=50MB
server.tomcat.max-swallow-size=50MB

spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.enabled=true
spring.web.resources.static-locations=classpath:/static/,file:C:/DATN/uploads/

PAYOS_CLIENT_ID=8abf445a-bb7e-403e-9845-177846153866
PAYOS_API_KEY=1d371ae4-ec91-4642-89fb-4a6a5f75f2cd
PAYOS_CHECKSUM_KEY=0254875b000a548ef6f8f738a54b6afead8305b7a1715f11e1b12c270e913ad5

# GHN API Configuration
ghn.api.url=https://online-gateway.ghn.vn/shiip/public-api
ghn.api.token=7d2a4ab8-5f42-11f0-a7cc-72e0fee17ddb
ghn.api.shop-id=5386583

spring.thymeleaf.cache=false

order.auto-complete-seconds=10000